/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/agency.js":
/*!**********************!*\
  !*** ./js/agency.js ***!
  \**********************/
/*! exports provided: agency */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"agency\", function() { return agency; });\n// Agency Theme JavaScript\r\n\r\nfunction agency($) {\r\n    \"use strict\"; // Start of use strict\r\n\r\n    // jQuery for page scrolling feature - requires jQuery Easing plugin\r\n    $('a.page-scroll').bind('click', function(event) {\r\n        var $anchor = $(this);\r\n        $('html, body').stop().animate({\r\n            scrollTop: ($($anchor.attr('href')).offset().top - 50)\r\n        }, 1250, 'easeInOutExpo');\r\n        event.preventDefault();\r\n    });\r\n\r\n    // Highlight the top nav as scrolling occurs\r\n    $('body').scrollspy({\r\n        target: '.navbar-fixed-top',\r\n        offset: 51\r\n    });\r\n\r\n    // Closes the Responsive Menu on Menu Item Click\r\n    $('.navbar-collapse ul li a').click(function(){ \r\n            $('.navbar-toggle:visible').click();\r\n    });\r\n\r\n    // Offset for Main Navigation\r\n    $('#mainNav').affix({\r\n        offset: {\r\n            top: 100\r\n        }\r\n    })\r\n\r\n}// End of use strict\r\n\n\n//# sourceURL=webpack:///./js/agency.js?");

/***/ }),

/***/ "./js/app.js":
/*!*******************!*\
  !*** ./js/app.js ***!
  \*******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _agency_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./agency.js */ \"./js/agency.js\");\n/* harmony import */ var _contact_me_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./contact_me.js */ \"./js/contact_me.js\");\n/* harmony import */ var _jqBootstrapValidation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jqBootstrapValidation.js */ \"./js/jqBootstrapValidation.js\");\n/* harmony import */ var _jqBootstrapValidation_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_jqBootstrapValidation_js__WEBPACK_IMPORTED_MODULE_2__);\n // or './module'\r\n // or './module'\r\n // or './module'\r\n\n\n//# sourceURL=webpack:///./js/app.js?");

/***/ }),

/***/ "./js/contact_me.js":
/*!**************************!*\
  !*** ./js/contact_me.js ***!
  \**************************/
/*! exports provided: contact_me */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"contact_me\", function() { return contact_me; });\n// Contact Form Scripts\r\n\r\nfunction contact_me() {\r\n\r\n    $(\"#contactForm input,#contactForm textarea\").jqBootstrapValidation({\r\n        preventSubmit: true,\r\n        submitError: function($form, event, errors) {\r\n            // additional error messages or events\r\n        },\r\n        submitSuccess: function($form, event) {\r\n            event.preventDefault(); // prevent default submit behaviour\r\n            // get values from FORM\r\n            var name = $(\"input#name\").val();\r\n            var email = $(\"input#email\").val();\r\n            var phone = $(\"input#phone\").val();\r\n            var message = $(\"textarea#message\").val();\r\n            var firstName = name; // For Success/Failure Message\r\n            // Check for white space in name for Success/Fail message\r\n            if (firstName.indexOf(' ') >= 0) {\r\n                firstName = name.split(' ').slice(0, -1).join(' ');\r\n            }\r\n            $.ajax({\r\n                url: \"././mail/contact_me.php\",\r\n                type: \"POST\",\r\n                data: {\r\n                    name: name,\r\n                    phone: phone,\r\n                    email: email,\r\n                    message: message\r\n                },\r\n                cache: false,\r\n                success: function() {\r\n                    // Success message\r\n                    $('#success').html(\"<div class='alert alert-success'>\");\r\n                    $('#success > .alert-success').html(\"<button type='button' class='close' data-dismiss='alert' aria-hidden='true'>&times;\")\r\n                        .append(\"</button>\");\r\n                    $('#success > .alert-success')\r\n                        .append(\"<strong>Your message has been sent. </strong>\");\r\n                    $('#success > .alert-success')\r\n                        .append('</div>');\r\n\r\n                    //clear all fields\r\n                    $('#contactForm').trigger(\"reset\");\r\n                },\r\n                error: function() {\r\n                    // Fail message\r\n                    $('#success').html(\"<div class='alert alert-danger'>\");\r\n                    $('#success > .alert-danger').html(\"<button type='button' class='close' data-dismiss='alert' aria-hidden='true'>&times;\")\r\n                        .append(\"</button>\");\r\n                    $('#success > .alert-danger').append($(\"<strong>\").text(\"Sorry \" + firstName + \", it seems that my mail server is not responding. Please try again later!\"));\r\n                    $('#success > .alert-danger').append('</div>');\r\n                    //clear all fields\r\n                    $('#contactForm').trigger(\"reset\");\r\n                },\r\n            });\r\n        },\r\n        filter: function() {\r\n            return $(this).is(\":visible\");\r\n        },\r\n    });\r\n\r\n    $(\"a[data-toggle=\\\"tab\\\"]\").click(function(e) {\r\n        e.preventDefault();\r\n        $(this).tab(\"show\");\r\n    });\r\n};\r\n\r\n\r\n/*When clicking on Full hide fail/success boxes */\r\n$('#name').focus(function() {\r\n    $('#success').html('');\r\n});\r\n\n\n//# sourceURL=webpack:///./js/contact_me.js?");

/***/ }),

/***/ "./js/jqBootstrapValidation.js":
/*!*************************************!*\
  !*** ./js/jqBootstrapValidation.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* jqBootstrapValidation\r\n * A plugin for automating validation on Twitter Bootstrap formatted forms.\r\n *\r\n * v1.3.6\r\n *\r\n * License: MIT <http://opensource.org/licenses/mit-license.php> - see LICENSE file\r\n *\r\n * http://ReactiveRaven.github.com/jqBootstrapValidation/\r\n */\r\n\r\n(function( $ ){\r\n\r\n\tvar createdElements = [];\r\n\r\n\tvar defaults = {\r\n\t\toptions: {\r\n\t\t\tprependExistingHelpBlock: false,\r\n\t\t\tsniffHtml: true, // sniff for 'required', 'maxlength', etc\r\n\t\t\tpreventSubmit: true, // stop the form submit event from firing if validation fails\r\n\t\t\tsubmitError: false, // function called if there is an error when trying to submit\r\n\t\t\tsubmitSuccess: false, // function called just before a successful submit event is sent to the server\r\n            semanticallyStrict: false, // set to true to tidy up generated HTML output\r\n\t\t\tautoAdd: {\r\n\t\t\t\thelpBlocks: true\r\n\t\t\t},\r\n            filter: function () {\r\n                // return $(this).is(\":visible\"); // only validate elements you can see\r\n                return true; // validate everything\r\n            }\r\n\t\t},\r\n    methods: {\r\n      init : function( options ) {\r\n\r\n        var settings = $.extend(true, {}, defaults);\r\n\r\n        settings.options = $.extend(true, settings.options, options);\r\n\r\n        var $siblingElements = this;\r\n\r\n        var uniqueForms = $.unique(\r\n          $siblingElements.map( function () {\r\n            return $(this).parents(\"form\")[0];\r\n          }).toArray()\r\n        );\r\n\r\n        $(uniqueForms).bind(\"submit\", function (e) {\r\n          var $form = $(this);\r\n          var warningsFound = 0;\r\n          var $inputs = $form.find(\"input,textarea,select\").not(\"[type=submit],[type=image]\").filter(settings.options.filter);\r\n          $inputs.trigger(\"submit.validation\").trigger(\"validationLostFocus.validation\");\r\n\r\n          $inputs.each(function (i, el) {\r\n            var $this = $(el),\r\n              $controlGroup = $this.parents(\".form-group\").first();\r\n            if (\r\n              $controlGroup.hasClass(\"warning\")\r\n            ) {\r\n              $controlGroup.removeClass(\"warning\").addClass(\"error\");\r\n              warningsFound++;\r\n            }\r\n          });\r\n\r\n          $inputs.trigger(\"validationLostFocus.validation\");\r\n\r\n          if (warningsFound) {\r\n            if (settings.options.preventSubmit) {\r\n              e.preventDefault();\r\n            }\r\n            $form.addClass(\"error\");\r\n            if ($.isFunction(settings.options.submitError)) {\r\n              settings.options.submitError($form, e, $inputs.jqBootstrapValidation(\"collectErrors\", true));\r\n            }\r\n          } else {\r\n            $form.removeClass(\"error\");\r\n            if ($.isFunction(settings.options.submitSuccess)) {\r\n              settings.options.submitSuccess($form, e);\r\n            }\r\n          }\r\n        });\r\n\r\n        return this.each(function(){\r\n\r\n          // Get references to everything we're interested in\r\n          var $this = $(this),\r\n            $controlGroup = $this.parents(\".form-group\").first(),\r\n            $helpBlock = $controlGroup.find(\".help-block\").first(),\r\n            $form = $this.parents(\"form\").first(),\r\n            validatorNames = [];\r\n\r\n          // create message container if not exists\r\n          if (!$helpBlock.length && settings.options.autoAdd && settings.options.autoAdd.helpBlocks) {\r\n              $helpBlock = $('<div class=\"help-block\" />');\r\n              $controlGroup.find('.controls').append($helpBlock);\r\n\t\t\t\t\t\t\tcreatedElements.push($helpBlock[0]);\r\n          }\r\n\r\n          // =============================================================\r\n          //                                     SNIFF HTML FOR VALIDATORS\r\n          // =============================================================\r\n\r\n          // *snort sniff snuffle*\r\n\r\n          if (settings.options.sniffHtml) {\r\n            var message = \"\";\r\n            // ---------------------------------------------------------\r\n            //                                                   PATTERN\r\n            // ---------------------------------------------------------\r\n            if ($this.attr(\"pattern\") !== undefined) {\r\n              message = \"Not in the expected format<!-- data-validation-pattern-message to override -->\";\r\n              if ($this.data(\"validationPatternMessage\")) {\r\n                message = $this.data(\"validationPatternMessage\");\r\n              }\r\n              $this.data(\"validationPatternMessage\", message);\r\n              $this.data(\"validationPatternRegex\", $this.attr(\"pattern\"));\r\n            }\r\n            // ---------------------------------------------------------\r\n            //                                                       MAX\r\n            // ---------------------------------------------------------\r\n            if ($this.attr(\"max\") !== undefined || $this.attr(\"aria-valuemax\") !== undefined) {\r\n              var max = ($this.attr(\"max\") !== undefined ? $this.attr(\"max\") : $this.attr(\"aria-valuemax\"));\r\n              message = \"Too high: Maximum of '\" + max + \"'<!-- data-validation-max-message to override -->\";\r\n              if ($this.data(\"validationMaxMessage\")) {\r\n                message = $this.data(\"validationMaxMessage\");\r\n              }\r\n              $this.data(\"validationMaxMessage\", message);\r\n              $this.data(\"validationMaxMax\", max);\r\n            }\r\n            // ---------------------------------------------------------\r\n            //                                                       MIN\r\n            // ---------------------------------------------------------\r\n            if ($this.attr(\"min\") !== undefined || $this.attr(\"aria-valuemin\") !== undefined) {\r\n              var min = ($this.attr(\"min\") !== undefined ? $this.attr(\"min\") : $this.attr(\"aria-valuemin\"));\r\n              message = \"Too low: Minimum of '\" + min + \"'<!-- data-validation-min-message to override -->\";\r\n              if ($this.data(\"validationMinMessage\")) {\r\n                message = $this.data(\"validationMinMessage\");\r\n              }\r\n              $this.data(\"validationMinMessage\", message);\r\n              $this.data(\"validationMinMin\", min);\r\n            }\r\n            // ---------------------------------------------------------\r\n            //                                                 MAXLENGTH\r\n            // ---------------------------------------------------------\r\n            if ($this.attr(\"maxlength\") !== undefined) {\r\n              message = \"Too long: Maximum of '\" + $this.attr(\"maxlength\") + \"' characters<!-- data-validation-maxlength-message to override -->\";\r\n              if ($this.data(\"validationMaxlengthMessage\")) {\r\n                message = $this.data(\"validationMaxlengthMessage\");\r\n              }\r\n              $this.data(\"validationMaxlengthMessage\", message);\r\n              $this.data(\"validationMaxlengthMaxlength\", $this.attr(\"maxlength\"));\r\n            }\r\n            // ---------------------------------------------------------\r\n            //                                                 MINLENGTH\r\n            // ---------------------------------------------------------\r\n            if ($this.attr(\"minlength\") !== undefined) {\r\n              message = \"Too short: Minimum of '\" + $this.attr(\"minlength\") + \"' characters<!-- data-validation-minlength-message to override -->\";\r\n              if ($this.data(\"validationMinlengthMessage\")) {\r\n                message = $this.data(\"validationMinlengthMessage\");\r\n              }\r\n              $this.data(\"validationMinlengthMessage\", message);\r\n              $this.data(\"validationMinlengthMinlength\", $this.attr(\"minlength\"));\r\n            }\r\n            // ---------------------------------------------------------\r\n            //                                                  REQUIRED\r\n            // ---------------------------------------------------------\r\n            if ($this.attr(\"required\") !== undefined || $this.attr(\"aria-required\") !== undefined) {\r\n              message = settings.builtInValidators.required.message;\r\n              if ($this.data(\"validationRequiredMessage\")) {\r\n                message = $this.data(\"validationRequiredMessage\");\r\n              }\r\n              $this.data(\"validationRequiredMessage\", message);\r\n            }\r\n            // ---------------------------------------------------------\r\n            //                                                    NUMBER\r\n            // ---------------------------------------------------------\r\n            if ($this.attr(\"type\") !== undefined && $this.attr(\"type\").toLowerCase() === \"number\") {\r\n              message = settings.builtInValidators.number.message;\r\n              if ($this.data(\"validationNumberMessage\")) {\r\n                message = $this.data(\"validationNumberMessage\");\r\n              }\r\n              $this.data(\"validationNumberMessage\", message);\r\n            }\r\n            // ---------------------------------------------------------\r\n            //                                                     EMAIL\r\n            // ---------------------------------------------------------\r\n            if ($this.attr(\"type\") !== undefined && $this.attr(\"type\").toLowerCase() === \"email\") {\r\n              message = \"Not a valid email address<!-- data-validator-validemail-message to override -->\";\r\n              if ($this.data(\"validationValidemailMessage\")) {\r\n                message = $this.data(\"validationValidemailMessage\");\r\n              } else if ($this.data(\"validationEmailMessage\")) {\r\n                message = $this.data(\"validationEmailMessage\");\r\n              }\r\n              $this.data(\"validationValidemailMessage\", message);\r\n            }\r\n            // ---------------------------------------------------------\r\n            //                                                MINCHECKED\r\n            // ---------------------------------------------------------\r\n            if ($this.attr(\"minchecked\") !== undefined) {\r\n              message = \"Not enough options checked; Minimum of '\" + $this.attr(\"minchecked\") + \"' required<!-- data-validation-minchecked-message to override -->\";\r\n              if ($this.data(\"validationMincheckedMessage\")) {\r\n                message = $this.data(\"validationMincheckedMessage\");\r\n              }\r\n              $this.data(\"validationMincheckedMessage\", message);\r\n              $this.data(\"validationMincheckedMinchecked\", $this.attr(\"minchecked\"));\r\n            }\r\n            // ---------------------------------------------------------\r\n            //                                                MAXCHECKED\r\n            // ---------------------------------------------------------\r\n            if ($this.attr(\"maxchecked\") !== undefined) {\r\n              message = \"Too many options checked; Maximum of '\" + $this.attr(\"maxchecked\") + \"' required<!-- data-validation-maxchecked-message to override -->\";\r\n              if ($this.data(\"validationMaxcheckedMessage\")) {\r\n                message = $this.data(\"validationMaxcheckedMessage\");\r\n              }\r\n              $this.data(\"validationMaxcheckedMessage\", message);\r\n              $this.data(\"validationMaxcheckedMaxchecked\", $this.attr(\"maxchecked\"));\r\n            }\r\n          }\r\n\r\n          // =============================================================\r\n          //                                       COLLECT VALIDATOR NAMES\r\n          // =============================================================\r\n\r\n          // Get named validators\r\n          if ($this.data(\"validation\") !== undefined) {\r\n            validatorNames = $this.data(\"validation\").split(\",\");\r\n          }\r\n\r\n          // Get extra ones defined on the element's data attributes\r\n          $.each($this.data(), function (i, el) {\r\n            var parts = i.replace(/([A-Z])/g, \",$1\").split(\",\");\r\n            if (parts[0] === \"validation\" && parts[1]) {\r\n              validatorNames.push(parts[1]);\r\n            }\r\n          });\r\n\r\n          // =============================================================\r\n          //                                     NORMALISE VALIDATOR NAMES\r\n          // =============================================================\r\n\r\n          var validatorNamesToInspect = validatorNames;\r\n          var newValidatorNamesToInspect = [];\r\n\r\n          do // repeatedly expand 'shortcut' validators into their real validators\r\n          {\r\n            // Uppercase only the first letter of each name\r\n            $.each(validatorNames, function (i, el) {\r\n              validatorNames[i] = formatValidatorName(el);\r\n            });\r\n\r\n            // Remove duplicate validator names\r\n            validatorNames = $.unique(validatorNames);\r\n\r\n            // Pull out the new validator names from each shortcut\r\n            newValidatorNamesToInspect = [];\r\n            $.each(validatorNamesToInspect, function(i, el) {\r\n              if ($this.data(\"validation\" + el + \"Shortcut\") !== undefined) {\r\n                // Are these custom validators?\r\n                // Pull them out!\r\n                $.each($this.data(\"validation\" + el + \"Shortcut\").split(\",\"), function(i2, el2) {\r\n                  newValidatorNamesToInspect.push(el2);\r\n                });\r\n              } else if (settings.builtInValidators[el.toLowerCase()]) {\r\n                // Is this a recognised built-in?\r\n                // Pull it out!\r\n                var validator = settings.builtInValidators[el.toLowerCase()];\r\n                if (validator.type.toLowerCase() === \"shortcut\") {\r\n                  $.each(validator.shortcut.split(\",\"), function (i, el) {\r\n                    el = formatValidatorName(el);\r\n                    newValidatorNamesToInspect.push(el);\r\n                    validatorNames.push(el);\r\n                  });\r\n                }\r\n              }\r\n            });\r\n\r\n            validatorNamesToInspect = newValidatorNamesToInspect;\r\n\r\n          } while (validatorNamesToInspect.length > 0)\r\n\r\n          // =============================================================\r\n          //                                       SET UP VALIDATOR ARRAYS\r\n          // =============================================================\r\n\r\n          var validators = {};\r\n\r\n          $.each(validatorNames, function (i, el) {\r\n            // Set up the 'override' message\r\n            var message = $this.data(\"validation\" + el + \"Message\");\r\n            var hasOverrideMessage = (message !== undefined);\r\n            var foundValidator = false;\r\n            message =\r\n              (\r\n                message\r\n                  ? message\r\n                  : \"'\" + el + \"' validation failed <!-- Add attribute 'data-validation-\" + el.toLowerCase() + \"-message' to input to change this message -->\"\r\n              )\r\n            ;\r\n\r\n            $.each(\r\n              settings.validatorTypes,\r\n              function (validatorType, validatorTemplate) {\r\n                if (validators[validatorType] === undefined) {\r\n                  validators[validatorType] = [];\r\n                }\r\n                if (!foundValidator && $this.data(\"validation\" + el + formatValidatorName(validatorTemplate.name)) !== undefined) {\r\n                  validators[validatorType].push(\r\n                    $.extend(\r\n                      true,\r\n                      {\r\n                        name: formatValidatorName(validatorTemplate.name),\r\n                        message: message\r\n                      },\r\n                      validatorTemplate.init($this, el)\r\n                    )\r\n                  );\r\n                  foundValidator = true;\r\n                }\r\n              }\r\n            );\r\n\r\n            if (!foundValidator && settings.builtInValidators[el.toLowerCase()]) {\r\n\r\n              var validator = $.extend(true, {}, settings.builtInValidators[el.toLowerCase()]);\r\n              if (hasOverrideMessage) {\r\n                validator.message = message;\r\n              }\r\n              var validatorType = validator.type.toLowerCase();\r\n\r\n              if (validatorType === \"shortcut\") {\r\n                foundValidator = true;\r\n              } else {\r\n                $.each(\r\n                  settings.validatorTypes,\r\n                  function (validatorTemplateType, validatorTemplate) {\r\n                    if (validators[validatorTemplateType] === undefined) {\r\n                      validators[validatorTemplateType] = [];\r\n                    }\r\n                    if (!foundValidator && validatorType === validatorTemplateType.toLowerCase()) {\r\n                      $this.data(\"validation\" + el + formatValidatorName(validatorTemplate.name), validator[validatorTemplate.name.toLowerCase()]);\r\n                      validators[validatorType].push(\r\n                        $.extend(\r\n                          validator,\r\n                          validatorTemplate.init($this, el)\r\n                        )\r\n                      );\r\n                      foundValidator = true;\r\n                    }\r\n                  }\r\n                );\r\n              }\r\n            }\r\n\r\n            if (! foundValidator) {\r\n              $.error(\"Cannot find validation info for '\" + el + \"'\");\r\n            }\r\n          });\r\n\r\n          // =============================================================\r\n          //                                         STORE FALLBACK VALUES\r\n          // =============================================================\r\n\r\n          $helpBlock.data(\r\n            \"original-contents\",\r\n            (\r\n              $helpBlock.data(\"original-contents\")\r\n                ? $helpBlock.data(\"original-contents\")\r\n                : $helpBlock.html()\r\n            )\r\n          );\r\n\r\n          $helpBlock.data(\r\n            \"original-role\",\r\n            (\r\n              $helpBlock.data(\"original-role\")\r\n                ? $helpBlock.data(\"original-role\")\r\n                : $helpBlock.attr(\"role\")\r\n            )\r\n          );\r\n\r\n          $controlGroup.data(\r\n            \"original-classes\",\r\n            (\r\n              $controlGroup.data(\"original-clases\")\r\n                ? $controlGroup.data(\"original-classes\")\r\n                : $controlGroup.attr(\"class\")\r\n            )\r\n          );\r\n\r\n          $this.data(\r\n            \"original-aria-invalid\",\r\n            (\r\n              $this.data(\"original-aria-invalid\")\r\n                ? $this.data(\"original-aria-invalid\")\r\n                : $this.attr(\"aria-invalid\")\r\n            )\r\n          );\r\n\r\n          // =============================================================\r\n          //                                                    VALIDATION\r\n          // =============================================================\r\n\r\n          $this.bind(\r\n            \"validation.validation\",\r\n            function (event, params) {\r\n\r\n              var value = getValue($this);\r\n\r\n              // Get a list of the errors to apply\r\n              var errorsFound = [];\r\n\r\n              $.each(validators, function (validatorType, validatorTypeArray) {\r\n                if (value || value.length || (params && params.includeEmpty) || (!!settings.validatorTypes[validatorType].blockSubmit && params && !!params.submitting)) {\r\n                  $.each(validatorTypeArray, function (i, validator) {\r\n                    if (settings.validatorTypes[validatorType].validate($this, value, validator)) {\r\n                      errorsFound.push(validator.message);\r\n                    }\r\n                  });\r\n                }\r\n              });\r\n\r\n              return errorsFound;\r\n            }\r\n          );\r\n\r\n          $this.bind(\r\n            \"getValidators.validation\",\r\n            function () {\r\n              return validators;\r\n            }\r\n          );\r\n\r\n          // =============================================================\r\n          //                                             WATCH FOR CHANGES\r\n          // =============================================================\r\n          $this.bind(\r\n            \"submit.validation\",\r\n            function () {\r\n              return $this.triggerHandler(\"change.validation\", {submitting: true});\r\n            }\r\n          );\r\n          $this.bind(\r\n            [\r\n              \"keyup\",\r\n              \"focus\",\r\n              \"blur\",\r\n              \"click\",\r\n              \"keydown\",\r\n              \"keypress\",\r\n              \"change\"\r\n            ].join(\".validation \") + \".validation\",\r\n            function (e, params) {\r\n\r\n              var value = getValue($this);\r\n\r\n              var errorsFound = [];\r\n\r\n              $controlGroup.find(\"input,textarea,select\").each(function (i, el) {\r\n                var oldCount = errorsFound.length;\r\n                $.each($(el).triggerHandler(\"validation.validation\", params), function (j, message) {\r\n                  errorsFound.push(message);\r\n                });\r\n                if (errorsFound.length > oldCount) {\r\n                  $(el).attr(\"aria-invalid\", \"true\");\r\n                } else {\r\n                  var original = $this.data(\"original-aria-invalid\");\r\n                  $(el).attr(\"aria-invalid\", (original !== undefined ? original : false));\r\n                }\r\n              });\r\n\r\n              $form.find(\"input,select,textarea\").not($this).not(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\").trigger(\"validationLostFocus.validation\");\r\n\r\n              errorsFound = $.unique(errorsFound.sort());\r\n\r\n              // Were there any errors?\r\n              if (errorsFound.length) {\r\n                // Better flag it up as a warning.\r\n                $controlGroup.removeClass(\"success error\").addClass(\"warning\");\r\n\r\n                // How many errors did we find?\r\n                if (settings.options.semanticallyStrict && errorsFound.length === 1) {\r\n                  // Only one? Being strict? Just output it.\r\n                  $helpBlock.html(errorsFound[0] + \r\n                    ( settings.options.prependExistingHelpBlock ? $helpBlock.data(\"original-contents\") : \"\" ));\r\n                } else {\r\n                  // Multiple? Being sloppy? Glue them together into an UL.\r\n                  $helpBlock.html(\"<ul role=\\\"alert\\\"><li>\" + errorsFound.join(\"</li><li>\") + \"</li></ul>\" +\r\n                    ( settings.options.prependExistingHelpBlock ? $helpBlock.data(\"original-contents\") : \"\" ));\r\n                }\r\n              } else {\r\n                $controlGroup.removeClass(\"warning error success\");\r\n                if (value.length > 0) {\r\n                  $controlGroup.addClass(\"success\");\r\n                }\r\n                $helpBlock.html($helpBlock.data(\"original-contents\"));\r\n              }\r\n\r\n              if (e.type === \"blur\") {\r\n                $controlGroup.removeClass(\"success\");\r\n              }\r\n            }\r\n          );\r\n          $this.bind(\"validationLostFocus.validation\", function () {\r\n            $controlGroup.removeClass(\"success\");\r\n          });\r\n        });\r\n      },\r\n      destroy : function( ) {\r\n\r\n        return this.each(\r\n          function() {\r\n\r\n            var\r\n              $this = $(this),\r\n              $controlGroup = $this.parents(\".form-group\").first(),\r\n              $helpBlock = $controlGroup.find(\".help-block\").first();\r\n\r\n            // remove our events\r\n            $this.unbind('.validation'); // events are namespaced.\r\n            // reset help text\r\n            $helpBlock.html($helpBlock.data(\"original-contents\"));\r\n            // reset classes\r\n            $controlGroup.attr(\"class\", $controlGroup.data(\"original-classes\"));\r\n            // reset aria\r\n            $this.attr(\"aria-invalid\", $this.data(\"original-aria-invalid\"));\r\n            // reset role\r\n            $helpBlock.attr(\"role\", $this.data(\"original-role\"));\r\n\t\t\t\t\t\t// remove all elements we created\r\n\t\t\t\t\t\tif (createdElements.indexOf($helpBlock[0]) > -1) {\r\n\t\t\t\t\t\t\t$helpBlock.remove();\r\n\t\t\t\t\t\t}\r\n\r\n          }\r\n        );\r\n\r\n      },\r\n      collectErrors : function(includeEmpty) {\r\n\r\n        var errorMessages = {};\r\n        this.each(function (i, el) {\r\n          var $el = $(el);\r\n          var name = $el.attr(\"name\");\r\n          var errors = $el.triggerHandler(\"validation.validation\", {includeEmpty: true});\r\n          errorMessages[name] = $.extend(true, errors, errorMessages[name]);\r\n        });\r\n\r\n        $.each(errorMessages, function (i, el) {\r\n          if (el.length === 0) {\r\n            delete errorMessages[i];\r\n          }\r\n        });\r\n\r\n        return errorMessages;\r\n\r\n      },\r\n      hasErrors: function() {\r\n\r\n        var errorMessages = [];\r\n\r\n        this.each(function (i, el) {\r\n          errorMessages = errorMessages.concat(\r\n            $(el).triggerHandler(\"getValidators.validation\") ? $(el).triggerHandler(\"validation.validation\", {submitting: true}) : []\r\n          );\r\n        });\r\n\r\n        return (errorMessages.length > 0);\r\n      },\r\n      override : function (newDefaults) {\r\n        defaults = $.extend(true, defaults, newDefaults);\r\n      }\r\n    },\r\n\t\tvalidatorTypes: {\r\n      callback: {\r\n        name: \"callback\",\r\n        init: function ($this, name) {\r\n          return {\r\n            validatorName: name,\r\n            callback: $this.data(\"validation\" + name + \"Callback\"),\r\n            lastValue: $this.val(),\r\n            lastValid: true,\r\n            lastFinished: true\r\n          };\r\n        },\r\n        validate: function ($this, value, validator) {\r\n          if (validator.lastValue === value && validator.lastFinished) {\r\n            return !validator.lastValid;\r\n          }\r\n\r\n          if (validator.lastFinished === true)\r\n          {\r\n            validator.lastValue = value;\r\n            validator.lastValid = true;\r\n            validator.lastFinished = false;\r\n\r\n            var rrjqbvValidator = validator;\r\n            var rrjqbvThis = $this;\r\n            executeFunctionByName(\r\n              validator.callback,\r\n              window,\r\n              $this,\r\n              value,\r\n              function (data) {\r\n                if (rrjqbvValidator.lastValue === data.value) {\r\n                  rrjqbvValidator.lastValid = data.valid;\r\n                  if (data.message) {\r\n                    rrjqbvValidator.message = data.message;\r\n                  }\r\n                  rrjqbvValidator.lastFinished = true;\r\n                  rrjqbvThis.data(\"validation\" + rrjqbvValidator.validatorName + \"Message\", rrjqbvValidator.message);\r\n                  // Timeout is set to avoid problems with the events being considered 'already fired'\r\n                  setTimeout(function () {\r\n                    rrjqbvThis.trigger(\"change.validation\");\r\n                  }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\r\n                }\r\n              }\r\n            );\r\n          }\r\n\r\n          return false;\r\n\r\n        }\r\n      },\r\n      ajax: {\r\n        name: \"ajax\",\r\n        init: function ($this, name) {\r\n          return {\r\n            validatorName: name,\r\n            url: $this.data(\"validation\" + name + \"Ajax\"),\r\n            lastValue: $this.val(),\r\n            lastValid: true,\r\n            lastFinished: true\r\n          };\r\n        },\r\n        validate: function ($this, value, validator) {\r\n          if (\"\"+validator.lastValue === \"\"+value && validator.lastFinished === true) {\r\n            return validator.lastValid === false;\r\n          }\r\n\r\n          if (validator.lastFinished === true)\r\n          {\r\n            validator.lastValue = value;\r\n            validator.lastValid = true;\r\n            validator.lastFinished = false;\r\n            $.ajax({\r\n              url: validator.url,\r\n              data: \"value=\" + value + \"&field=\" + $this.attr(\"name\"),\r\n              dataType: \"json\",\r\n              success: function (data) {\r\n                if (\"\"+validator.lastValue === \"\"+data.value) {\r\n                  validator.lastValid = !!(data.valid);\r\n                  if (data.message) {\r\n                    validator.message = data.message;\r\n                  }\r\n                  validator.lastFinished = true;\r\n                  $this.data(\"validation\" + validator.validatorName + \"Message\", validator.message);\r\n                  // Timeout is set to avoid problems with the events being considered 'already fired'\r\n                  setTimeout(function () {\r\n                    $this.trigger(\"change.validation\");\r\n                  }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\r\n                }\r\n              },\r\n              failure: function () {\r\n                validator.lastValid = true;\r\n                validator.message = \"ajax call failed\";\r\n                validator.lastFinished = true;\r\n                $this.data(\"validation\" + validator.validatorName + \"Message\", validator.message);\r\n                // Timeout is set to avoid problems with the events being considered 'already fired'\r\n                setTimeout(function () {\r\n                  $this.trigger(\"change.validation\");\r\n                }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\r\n              }\r\n            });\r\n          }\r\n\r\n          return false;\r\n\r\n        }\r\n      },\r\n\t\t\tregex: {\r\n\t\t\t\tname: \"regex\",\r\n\t\t\t\tinit: function ($this, name) {\r\n\t\t\t\t\treturn {regex: regexFromString($this.data(\"validation\" + name + \"Regex\"))};\r\n\t\t\t\t},\r\n\t\t\t\tvalidate: function ($this, value, validator) {\r\n\t\t\t\t\treturn (!validator.regex.test(value) && ! validator.negative)\r\n\t\t\t\t\t\t|| (validator.regex.test(value) && validator.negative);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\trequired: {\r\n\t\t\t\tname: \"required\",\r\n\t\t\t\tinit: function ($this, name) {\r\n\t\t\t\t\treturn {};\r\n\t\t\t\t},\r\n\t\t\t\tvalidate: function ($this, value, validator) {\r\n\t\t\t\t\treturn !!(value.length === 0  && ! validator.negative)\r\n\t\t\t\t\t\t|| !!(value.length > 0 && validator.negative);\r\n\t\t\t\t},\r\n        blockSubmit: true\r\n\t\t\t},\r\n\t\t\tmatch: {\r\n\t\t\t\tname: \"match\",\r\n\t\t\t\tinit: function ($this, name) {\r\n\t\t\t\t\tvar element = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.data(\"validation\" + name + \"Match\") + \"\\\"]\").first();\r\n\t\t\t\t\telement.bind(\"validation.validation\", function () {\r\n\t\t\t\t\t\t$this.trigger(\"change.validation\", {submitting: true});\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn {\"element\": element};\r\n\t\t\t\t},\r\n\t\t\t\tvalidate: function ($this, value, validator) {\r\n\t\t\t\t\treturn (value !== validator.element.val() && ! validator.negative)\r\n\t\t\t\t\t\t|| (value === validator.element.val() && validator.negative);\r\n\t\t\t\t},\r\n        blockSubmit: true\r\n\t\t\t},\r\n\t\t\tmax: {\r\n\t\t\t\tname: \"max\",\r\n\t\t\t\tinit: function ($this, name) {\r\n\t\t\t\t\treturn {max: $this.data(\"validation\" + name + \"Max\")};\r\n\t\t\t\t},\r\n\t\t\t\tvalidate: function ($this, value, validator) {\r\n\t\t\t\t\treturn (parseFloat(value, 10) > parseFloat(validator.max, 10) && ! validator.negative)\r\n\t\t\t\t\t\t|| (parseFloat(value, 10) <= parseFloat(validator.max, 10) && validator.negative);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tmin: {\r\n\t\t\t\tname: \"min\",\r\n\t\t\t\tinit: function ($this, name) {\r\n\t\t\t\t\treturn {min: $this.data(\"validation\" + name + \"Min\")};\r\n\t\t\t\t},\r\n\t\t\t\tvalidate: function ($this, value, validator) {\r\n\t\t\t\t\treturn (parseFloat(value) < parseFloat(validator.min) && ! validator.negative)\r\n\t\t\t\t\t\t|| (parseFloat(value) >= parseFloat(validator.min) && validator.negative);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tmaxlength: {\r\n\t\t\t\tname: \"maxlength\",\r\n\t\t\t\tinit: function ($this, name) {\r\n\t\t\t\t\treturn {maxlength: $this.data(\"validation\" + name + \"Maxlength\")};\r\n\t\t\t\t},\r\n\t\t\t\tvalidate: function ($this, value, validator) {\r\n\t\t\t\t\treturn ((value.length > validator.maxlength) && ! validator.negative)\r\n\t\t\t\t\t\t|| ((value.length <= validator.maxlength) && validator.negative);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tminlength: {\r\n\t\t\t\tname: \"minlength\",\r\n\t\t\t\tinit: function ($this, name) {\r\n\t\t\t\t\treturn {minlength: $this.data(\"validation\" + name + \"Minlength\")};\r\n\t\t\t\t},\r\n\t\t\t\tvalidate: function ($this, value, validator) {\r\n\t\t\t\t\treturn ((value.length < validator.minlength) && ! validator.negative)\r\n\t\t\t\t\t\t|| ((value.length >= validator.minlength) && validator.negative);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tmaxchecked: {\r\n\t\t\t\tname: \"maxchecked\",\r\n\t\t\t\tinit: function ($this, name) {\r\n\t\t\t\t\tvar elements = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\");\r\n\t\t\t\t\telements.bind(\"click.validation\", function () {\r\n\t\t\t\t\t\t$this.trigger(\"change.validation\", {includeEmpty: true});\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn {maxchecked: $this.data(\"validation\" + name + \"Maxchecked\"), elements: elements};\r\n\t\t\t\t},\r\n\t\t\t\tvalidate: function ($this, value, validator) {\r\n\t\t\t\t\treturn (validator.elements.filter(\":checked\").length > validator.maxchecked && ! validator.negative)\r\n\t\t\t\t\t\t|| (validator.elements.filter(\":checked\").length <= validator.maxchecked && validator.negative);\r\n\t\t\t\t},\r\n        blockSubmit: true\r\n\t\t\t},\r\n\t\t\tminchecked: {\r\n\t\t\t\tname: \"minchecked\",\r\n\t\t\t\tinit: function ($this, name) {\r\n\t\t\t\t\tvar elements = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\");\r\n\t\t\t\t\telements.bind(\"click.validation\", function () {\r\n\t\t\t\t\t\t$this.trigger(\"change.validation\", {includeEmpty: true});\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn {minchecked: $this.data(\"validation\" + name + \"Minchecked\"), elements: elements};\r\n\t\t\t\t},\r\n\t\t\t\tvalidate: function ($this, value, validator) {\r\n\t\t\t\t\treturn (validator.elements.filter(\":checked\").length < validator.minchecked && ! validator.negative)\r\n\t\t\t\t\t\t|| (validator.elements.filter(\":checked\").length >= validator.minchecked && validator.negative);\r\n\t\t\t\t},\r\n        blockSubmit: true\r\n\t\t\t}\r\n\t\t},\r\n\t\tbuiltInValidators: {\r\n\t\t\temail: {\r\n\t\t\t\tname: \"Email\",\r\n\t\t\t\ttype: \"shortcut\",\r\n\t\t\t\tshortcut: \"validemail\"\r\n\t\t\t},\r\n\t\t\tvalidemail: {\r\n\t\t\t\tname: \"Validemail\",\r\n\t\t\t\ttype: \"regex\",\r\n\t\t\t\tregex: \"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\\\.[A-Za-z]{2,4}\",\r\n\t\t\t\tmessage: \"Not a valid email address<!-- data-validator-validemail-message to override -->\"\r\n\t\t\t},\r\n\t\t\tpasswordagain: {\r\n\t\t\t\tname: \"Passwordagain\",\r\n\t\t\t\ttype: \"match\",\r\n\t\t\t\tmatch: \"password\",\r\n\t\t\t\tmessage: \"Does not match the given password<!-- data-validator-paswordagain-message to override -->\"\r\n\t\t\t},\r\n\t\t\tpositive: {\r\n\t\t\t\tname: \"Positive\",\r\n\t\t\t\ttype: \"shortcut\",\r\n\t\t\t\tshortcut: \"number,positivenumber\"\r\n\t\t\t},\r\n\t\t\tnegative: {\r\n\t\t\t\tname: \"Negative\",\r\n\t\t\t\ttype: \"shortcut\",\r\n\t\t\t\tshortcut: \"number,negativenumber\"\r\n\t\t\t},\r\n\t\t\tnumber: {\r\n\t\t\t\tname: \"Number\",\r\n\t\t\t\ttype: \"regex\",\r\n\t\t\t\tregex: \"([+-]?\\\\\\d+(\\\\\\.\\\\\\d*)?([eE][+-]?[0-9]+)?)?\",\r\n\t\t\t\tmessage: \"Must be a number<!-- data-validator-number-message to override -->\"\r\n\t\t\t},\r\n\t\t\tinteger: {\r\n\t\t\t\tname: \"Integer\",\r\n\t\t\t\ttype: \"regex\",\r\n\t\t\t\tregex: \"[+-]?\\\\\\d+\",\r\n\t\t\t\tmessage: \"No decimal places allowed<!-- data-validator-integer-message to override -->\"\r\n\t\t\t},\r\n\t\t\tpositivenumber: {\r\n\t\t\t\tname: \"Positivenumber\",\r\n\t\t\t\ttype: \"min\",\r\n\t\t\t\tmin: 0,\r\n\t\t\t\tmessage: \"Must be a positive number<!-- data-validator-positivenumber-message to override -->\"\r\n\t\t\t},\r\n\t\t\tnegativenumber: {\r\n\t\t\t\tname: \"Negativenumber\",\r\n\t\t\t\ttype: \"max\",\r\n\t\t\t\tmax: 0,\r\n\t\t\t\tmessage: \"Must be a negative number<!-- data-validator-negativenumber-message to override -->\"\r\n\t\t\t},\r\n\t\t\trequired: {\r\n\t\t\t\tname: \"Required\",\r\n\t\t\t\ttype: \"required\",\r\n\t\t\t\tmessage: \"This is required<!-- data-validator-required-message to override -->\"\r\n\t\t\t},\r\n\t\t\tcheckone: {\r\n\t\t\t\tname: \"Checkone\",\r\n\t\t\t\ttype: \"minchecked\",\r\n\t\t\t\tminchecked: 1,\r\n\t\t\t\tmessage: \"Check at least one option<!-- data-validation-checkone-message to override -->\"\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tvar formatValidatorName = function (name) {\r\n\t\treturn name\r\n\t\t\t.toLowerCase()\r\n\t\t\t.replace(\r\n\t\t\t\t/(^|\\s)([a-z])/g ,\r\n\t\t\t\tfunction(m,p1,p2) {\r\n\t\t\t\t\treturn p1+p2.toUpperCase();\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t;\r\n\t};\r\n\r\n\tvar getValue = function ($this) {\r\n\t\t// Extract the value we're talking about\r\n\t\tvar value = $this.val();\r\n\t\tvar type = $this.attr(\"type\");\r\n\t\tif (type === \"checkbox\") {\r\n\t\t\tvalue = ($this.is(\":checked\") ? value : \"\");\r\n\t\t}\r\n\t\tif (type === \"radio\") {\r\n\t\t\tvalue = ($('input[name=\"' + $this.attr(\"name\") + '\"]:checked').length > 0 ? value : \"\");\r\n\t\t}\r\n\t\treturn value;\r\n\t};\r\n\r\n  function regexFromString(inputstring) {\r\n\t\treturn new RegExp(\"^\" + inputstring + \"$\");\r\n\t}\r\n\r\n  /**\r\n   * Thanks to Jason Bunting via StackOverflow.com\r\n   *\r\n   * http://stackoverflow.com/questions/359788/how-to-execute-a-javascript-function-when-i-have-its-name-as-a-string#answer-359910\r\n   * Short link: http://tinyurl.com/executeFunctionByName\r\n  **/\r\n  function executeFunctionByName(functionName, context /*, args*/) {\r\n    var args = Array.prototype.slice.call(arguments).splice(2);\r\n    var namespaces = functionName.split(\".\");\r\n    var func = namespaces.pop();\r\n    for(var i = 0; i < namespaces.length; i++) {\r\n      context = context[namespaces[i]];\r\n    }\r\n    return context[func].apply(this, args);\r\n  }\r\n\r\n\t$.fn.jqBootstrapValidation = function( method ) {\r\n\r\n\t\tif ( defaults.methods[method] ) {\r\n\t\t\treturn defaults.methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));\r\n\t\t} else if ( typeof method === 'object' || ! method ) {\r\n\t\t\treturn defaults.methods.init.apply( this, arguments );\r\n\t\t} else {\r\n\t\t$.error( 'Method ' +  method + ' does not exist on jQuery.jqBootstrapValidation' );\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t};\r\n\r\n  $.jqBootstrapValidation = function (options) {\r\n    $(\":input\").not(\"[type=image],[type=submit]\").jqBootstrapValidation.apply(this,arguments);\r\n  };\r\n\r\n})( jQuery );\r\n\n\n//# sourceURL=webpack:///./js/jqBootstrapValidation.js?");

/***/ })

/******/ });